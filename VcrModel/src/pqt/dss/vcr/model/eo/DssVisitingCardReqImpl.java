package pqt.dss.vcr.model.eo;

import java.math.BigDecimal;

import java.sql.SQLException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 06 11:01:57 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DssVisitingCardReqImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AgentNoFk,
        BranchCodeFk,
        OfficialEmailAdd,
        UserIdFk,
        EnterDate,
        LastUpdatedBy,
        LastUpdatedDate,
        BranchStatus,
        DssStatus,
        BranchNotifIdFk,
        DssNotifIdFk,
        Qualification,
        AgentMobileNo,
        Address,
        VcrHdrIdFk,
        VisitingCardReqIdPk,
        DssVisitingCardReqHdr;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int AGENTNOFK = AttributesEnum.AgentNoFk.index();
    public static final int BRANCHCODEFK = AttributesEnum.BranchCodeFk.index();
    public static final int OFFICIALEMAILADD = AttributesEnum.OfficialEmailAdd.index();
    public static final int USERIDFK = AttributesEnum.UserIdFk.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int BRANCHSTATUS = AttributesEnum.BranchStatus.index();
    public static final int DSSSTATUS = AttributesEnum.DssStatus.index();
    public static final int BRANCHNOTIFIDFK = AttributesEnum.BranchNotifIdFk.index();
    public static final int DSSNOTIFIDFK = AttributesEnum.DssNotifIdFk.index();
    public static final int QUALIFICATION = AttributesEnum.Qualification.index();
    public static final int AGENTMOBILENO = AttributesEnum.AgentMobileNo.index();
    public static final int ADDRESS = AttributesEnum.Address.index();
    public static final int VCRHDRIDFK = AttributesEnum.VcrHdrIdFk.index();
    public static final int VISITINGCARDREQIDPK = AttributesEnum.VisitingCardReqIdPk.index();
    public static final int DSSVISITINGCARDREQHDR = AttributesEnum.DssVisitingCardReqHdr.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DssVisitingCardReqImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("pqt.dss.vcr.model.eo.DssVisitingCardReq");
    }


    /**
     * Gets the attribute value for AgentNoFk, using the alias name AgentNoFk.
     * @return the value of AgentNoFk
     */
    public Number getAgentNoFk() {
        return (Number) getAttributeInternal(AGENTNOFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for AgentNoFk.
     * @param value value to set the AgentNoFk
     */
    public void setAgentNoFk(Number value) {
        setAttributeInternal(AGENTNOFK, value);
    }

    /**
     * Gets the attribute value for BranchCodeFk, using the alias name BranchCodeFk.
     * @return the value of BranchCodeFk
     */
    public String getBranchCodeFk() {
        return (String) getAttributeInternal(BRANCHCODEFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for BranchCodeFk.
     * @param value value to set the BranchCodeFk
     */
    public void setBranchCodeFk(String value) {
        setAttributeInternal(BRANCHCODEFK, value);
    }

    /**
     * Gets the attribute value for OfficialEmailAdd, using the alias name OfficialEmailAdd.
     * @return the value of OfficialEmailAdd
     */
    public String getOfficialEmailAdd() {
        return (String) getAttributeInternal(OFFICIALEMAILADD);
    }

    /**
     * Sets <code>value</code> as the attribute value for OfficialEmailAdd.
     * @param value value to set the OfficialEmailAdd
     */
    public void setOfficialEmailAdd(String value) {
        setAttributeInternal(OFFICIALEMAILADD, value);
    }

    /**
     * Gets the attribute value for UserIdFk, using the alias name UserIdFk.
     * @return the value of UserIdFk
     */
    public Number getUserIdFk() {
        return (Number) getAttributeInternal(USERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserIdFk.
     * @param value value to set the UserIdFk
     */
    public void setUserIdFk(Number value) {
        setAttributeInternal(USERIDFK, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for BranchStatus, using the alias name BranchStatus.
     * @return the value of BranchStatus
     */
    public String getBranchStatus() {
        return (String) getAttributeInternal(BRANCHSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for BranchStatus.
     * @param value value to set the BranchStatus
     */
    public void setBranchStatus(String value) {
        setAttributeInternal(BRANCHSTATUS, value);
    }

    /**
     * Gets the attribute value for DssStatus, using the alias name DssStatus.
     * @return the value of DssStatus
     */
    public String getDssStatus() {
        return (String) getAttributeInternal(DSSSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for DssStatus.
     * @param value value to set the DssStatus
     */
    public void setDssStatus(String value) {
        setAttributeInternal(DSSSTATUS, value);
    }

    /**
     * Gets the attribute value for BranchNotifIdFk, using the alias name BranchNotifIdFk.
     * @return the value of BranchNotifIdFk
     */
    public Number getBranchNotifIdFk() {
        return (Number) getAttributeInternal(BRANCHNOTIFIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for BranchNotifIdFk.
     * @param value value to set the BranchNotifIdFk
     */
    public void setBranchNotifIdFk(Number value) {
        setAttributeInternal(BRANCHNOTIFIDFK, value);
    }

    /**
     * Gets the attribute value for DssNotifIdFk, using the alias name DssNotifIdFk.
     * @return the value of DssNotifIdFk
     */
    public Number getDssNotifIdFk() {
        return (Number) getAttributeInternal(DSSNOTIFIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for DssNotifIdFk.
     * @param value value to set the DssNotifIdFk
     */
    public void setDssNotifIdFk(Number value) {
        setAttributeInternal(DSSNOTIFIDFK, value);
    }

    /**
     * Gets the attribute value for Qualification, using the alias name Qualification.
     * @return the value of Qualification
     */
    public String getQualification() {
        return (String) getAttributeInternal(QUALIFICATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Qualification.
     * @param value value to set the Qualification
     */
    public void setQualification(String value) {
        setAttributeInternal(QUALIFICATION, value);
    }

    /**
     * Gets the attribute value for AgentMobileNo, using the alias name AgentMobileNo.
     * @return the value of AgentMobileNo
     */
    public String getAgentMobileNo() {
        return (String) getAttributeInternal(AGENTMOBILENO);
    }

    /**
     * Sets <code>value</code> as the attribute value for AgentMobileNo.
     * @param value value to set the AgentMobileNo
     */
    public void setAgentMobileNo(String value) {
        setAttributeInternal(AGENTMOBILENO, value);
    }

    /**
     * Gets the attribute value for Address, using the alias name Address.
     * @return the value of Address
     */
    public String getAddress() {
        return (String) getAttributeInternal(ADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Address.
     * @param value value to set the Address
     */
    public void setAddress(String value) {
        setAttributeInternal(ADDRESS, value);
    }


    /**
     * Gets the attribute value for VcrHdrIdFk, using the alias name VcrHdrIdFk.
     * @return the value of VcrHdrIdFk
     */
    public Number getVcrHdrIdFk() {
        return (Number) getAttributeInternal(VCRHDRIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for VcrHdrIdFk.
     * @param value value to set the VcrHdrIdFk
     */
    public void setVcrHdrIdFk(Number value) {
        setAttributeInternal(VCRHDRIDFK, value);
    }

    /**
     * Gets the attribute value for VisitingCardReqIdPk1, using the alias name VisitingCardReqIdPk1.
     * @return the value of VisitingCardReqIdPk1
     */
    public Number getVisitingCardReqIdPk() {
        return (Number) getAttributeInternal(VISITINGCARDREQIDPK);
    }

    /**
     * Sets <code>value</code> as the attribute value for VisitingCardReqIdPk1.
     * @param value value to set the VisitingCardReqIdPk1
     */
    public void setVisitingCardReqIdPk(Number value) {
        setAttributeInternal(VISITINGCARDREQIDPK, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public DssVisitingCardReqHdrImpl getDssVisitingCardReqHdr() {
        return (DssVisitingCardReqHdrImpl) getAttributeInternal(DSSVISITINGCARDREQHDR);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDssVisitingCardReqHdr(DssVisitingCardReqHdrImpl value) {
        setAttributeInternal(DSSVISITINGCARDREQHDR, value);
    }


    /**
     * @param visitingCardReqIdPk key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number visitingCardReqIdPk) {
        return new Key(new Object[] { visitingCardReqIdPk });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
      protected void create(AttributeList attributeList) {
          super.create(attributeList);
          Date currentDate = new Date();
          setEnterDate((Date) currentDate.getCurrentDate());
          setLastUpdatedDate((Date) currentDate.getCurrentDate());
          SequenceImpl seq = new SequenceImpl("DSS_VISITING_CARD_REQ_SEQ", getDBTransaction());
          setVisitingCardReqIdPk(seq.getSequenceNumber());
          
          setBranchStatus("INCOMPLETE");
          setDssStatus("INCOMPLETE");
          
          FacesContext fctx = FacesContext.getCurrentInstance();
          ExternalContext ectx = fctx.getExternalContext();
          HttpSession userSession = (HttpSession) ectx.getSession(false);
          try {
              setUserIdFk(new Number(userSession.getAttribute("pUserId")));
              setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
          } catch (SQLException ex) {
              setUserIdFk(new Number(0));
              setLastUpdatedBy(new Number(0));
          }
      }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Date currentDate = new Date();
        if (operation == DML_UPDATE) {
            setLastUpdatedDate((Date) currentDate.getCurrentDate());
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession) ectx.getSession(false);
            try {
                setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
            } catch (SQLException ex) {
                setUserIdFk(new Number(0));
                setLastUpdatedBy(new Number(0));
            }
        }
        super.doDML(operation, e);
    }
}

